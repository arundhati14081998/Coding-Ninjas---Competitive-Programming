Knapsnack - Problem
Send Feedback
A thief robbing a store and can carry a maximal weight of W into his knapsack. There are N items and ith item weigh wi and is of value vi. What is the maximum value V, that thief can take ?
Space complexity should be O(W).
Input Format :
Line 1 : N i.e. number of items
Line 2 : N Integers i.e. weights of items separated by space
Line 3 : N Integers i.e. values of items separated by space
Line 4 : Integer W i.e. maximum weight thief can carry
Output Format :
Line 1 : Maximum value V
Constraints
1 <= N <= 10^4
1<= wi <= 100
1 <= vi <= 100
Sample Input 1 :
4
1 2 4 5
5 4 8 6
5
Sample Output :
13

----------------------------
maxwt, n=map(int, input().split())
wt=[]
val=[]
for i in range(n):
    x, y= map(int, input().split())
    wt.append(x)
    val.append(y)
dp=[[-1 for i in range(maxwt+1)]for j in range(n+1)]
for i in range(0, n+1):
        dp[i][0]=0
    
for j in range(0, maxwt+1):
    dp[0][j]=0
    
for i in range(1, n+1):
    for j in range(1, maxwt+1):
        dp[i][j]=dp[i-1][j]
        if (wt[i-1]<=j):
            dp[i][j]=max(dp[i][j], val[i-1]+dp[i-1][j-wt[i-1]])
i=n
j=maxwt
ans=0
# print(dp)
# print(i, j)
res=dp[n][maxwt]
w = maxwt 
for i in range(n, 0, -1): 
    if res <= 0: 
        break
    if res == dp[i - 1][w]: 
        continue
    else: 
        ans+=val[i - 1]
        res = res - val[i - 1] 
        w = w - wt[i - 1] 

print(ans, dp[n][maxwt])
    

